{"version":3,"sources":["components/navbar.jsx","services/backendCalls.js","components/home.jsx","components/predict.jsx","services/weatherKey.js","components/prediction.jsx","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","style","marginBottom","Fragment","to","apiEndpoint","process","createDataForTemp","date","a","initTime","Math","round","getTime","headers","axios","get","params","data","roundedTime","response","setTime","parseInt","predictLinear","times","prediction","getNNParameters","parameters","predictNeural","clouds","temp","humidity","nnData","x","y","unscaledX","theta","trainNeural","actual","post","Home","mounted","state","conditions","this","result","initDate","Date","calls","temps","days","i","time","minutes","getMinutes","getHours","day","getMonth","getDate","getYear","push","endTime","setHours","length","String","parseFloat","toFixed","setState","textAlign","map","condition","index","key","Component","Predict","Humidity","schema","Joi","number","required","validate","abortEarly","error","handleSubmit","e","preventDefault","handleChange","input","currentTarget","name","value","bind","pathname","fontSize","marginLeft","onSubmit","Object","keys","marginTop","type","onChange","disabled","weatherKey","Prediction","running","props","location","_state","window","select","option","val","App","Helmet","exact","path","component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.ea6996fe.chunk.js","sourcesContent":["import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport \"../css/navbar.css\";\nconst Navbar = () => {\n  return (\n    <div>\n      <nav\n        className=\"navbar navbar-expand-lg  navbar-light bg-dark\"\n        style={{ marginBottom: \"10vh\" }}\n      >\n        <div className=\"nav ml-auto mr-auto\">\n          <React.Fragment>\n            <NavLink className=\"nav-item nav-link h3 text-primary\" to=\"/\">\n              <div className=\"navButton\">Temperatures</div>\n            </NavLink>\n            <NavLink\n              className=\"nav-item nav-link h3 text-primary\"\n              to=\"/predict\"\n            >\n              <div className=\"navButton\">Predict</div>\n            </NavLink>\n          </React.Fragment>\n        </div>\n      </nav>\n    </div>\n  );\n};\n\nexport default Navbar;\n","import axios from \"axios\";\n//import $ from 'jquery';\n\nconst apiEndpoint = process.env.REACT_APP_API_URL;\n\nexport async function createDataForTemp(date) {\n  const initTime = Math.round(date.getTime() / 1000);\n  const headers = {\n    \"Content-Type\": \"application/json\"\n  };\n  const data = (\n    await axios.get(\n      apiEndpoint + \"/createData\",\n      { params: { initTime: initTime } },\n      headers\n    )\n  ).data;\n  const roundedTime = data.response;\n  date.setTime(parseInt(roundedTime) * 1000);\n  return date;\n}\n\nexport async function predictLinear(times) {\n  const headers = {\n    \"Content-Type\": \"application/json\"\n  };\n  const data = (\n    await axios.get(\n      apiEndpoint + \"/predictLinear\",\n      { params: { times: times } },\n      headers\n    )\n  ).data;\n  const prediction = data.response;\n  return prediction;\n}\n\nexport async function getNNParameters() {\n  /*const headers = { //delete in future?\n    \"Content-Type\": \"application/json\",\n  };*/\n  const data = (await axios.get(apiEndpoint + \"/getNNParameters\")).data;\n  const parameters = data.response;\n  return parameters;\n}\n\nexport async function predictNeural(clouds, temp, humidity) {\n  const headers = {\n    \"Content-Type\": \"application/json\"\n  };\n  const data = (\n    await axios.get(\n      apiEndpoint + \"/predictNeural\",\n      { params: { clouds, temp, humidity } },\n      headers\n    )\n  ).data;\n  const prediction = data.response;\n  const nnData = {\n    x: data.x,\n    y: data.y,\n    unscaledX: data.unscaledX,\n    theta: data.theta\n  };\n  return { prediction, nnData };\n}\n\nexport async function trainNeural(nnData, actual) {\n  const headers = {\n    \"Content-Type\": \"application/json\"\n  };\n  await axios.post(\n    apiEndpoint + \"/trainNeural\",\n    { nnData: nnData, actual: actual },\n    headers\n  );\n}\n","import React, { Component } from \"react\";\nimport * as calls from \"../services/backendCalls.js\";\nimport \"../css/home.css\";\nclass Home extends Component {\n  mounted = false;\n  state = {\n    conditions: []\n  };\n  async componentDidMount() {\n    this.mounted = true;\n    let result = [];\n    let initDate = new Date();\n    initDate = await calls.createDataForTemp(initDate);\n    let date = new Date(initDate.getTime());\n    let temps = [];\n    let times = [];\n    let days = [];\n    for (let i = 1; i < 41; i++) {\n      let time = \"\";\n      const minutes =\n        date.getMinutes() < 10 ? \"0\" + date.getMinutes() : date.getMinutes();\n      if (date.getHours() <= 12) time = date.getHours() + \":\" + minutes + \"AM\";\n      else time = date.getHours() - 12 + \":\" + minutes + \"PM\";\n      let day =\n        date.getMonth() +\n        1 +\n        \"/\" +\n        date.getDate() +\n        \"/\" +\n        (date.getYear() + 1900);\n      times.push(time);\n      days.push(day);\n      temps.push({\n        initTime: Math.round(initDate.getTime() / 1000),\n        endTime: Math.round(date.getTime() / 1000)\n      });\n      //const temp = await calls.predictLinear(initDate, date); //do all at once instead\n      date.setHours(date.getHours() + 3);\n    }\n    temps = await calls.predictLinear(temps);\n    for (let i = 0; i < times.length; i++) {\n      result.push({\n        temp: String(parseFloat(temps[i]).toFixed(2)) + \"℉\",\n        time: times[i],\n        day: days[i]\n      });\n    }\n\n    if (this.mounted) this.setState({ conditions: result });\n  }\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n  render() {\n    const conditions = this.state.conditions;\n    return (\n      <React.Fragment>\n        <h1 style={{ textAlign: \"center\" }}>\n          Predicted temperatures for Westport, CT\n        </h1>\n        <div className=\"contain\">\n          {conditions &&\n            conditions.map(function(condition, index) {\n              return (\n                <div key={index} className=\"unit\">\n                  <p>{condition.temp}</p>\n                  <p>{condition.time}</p>\n                  <p>{condition.day}</p>\n                </div>\n              );\n            })}\n        </div>\n      </React.Fragment>\n    );\n  }\n}\nexport default Home;\n","import React, { Component } from \"react\";\nimport * as calls from \"../services/backendCalls.js\";\nimport Joi from \"joi-browser\";\nimport { Redirect } from \"react-router-dom\";\n\nclass Predict extends Component {\n  mounted = false;\n\n  state = {\n    parameters: {\n      \"Clouds(#)\": \"\",\n      \"Temp(F)\": \"\",\n      Humidity: \"\"\n    },\n    result: null,\n    nnData: null\n  };\n  schema = {\n    //using Joi for form creation and errors (change?)\n    \"Clouds(#)\": Joi.number().required(),\n    \"Temp(F)\": Joi.number().required(),\n    Humidity: Joi.number().required()\n  };\n  validate = () => {\n    const options = { abortEarly: false };\n    const { error } = Joi.validate(this.state.parameters, this.schema, options);\n    if (!error) return false;\n    //for (let item of error.details) errors[item.path[0]] = item.message;\n    return true;\n  };\n\n  async componentDidMount() {\n    this.mounted = true;\n    //get default values for weather for today and store them in state\n    let initDate = new Date();\n    await calls.createDataForTemp(initDate);\n    const parameters = await calls.getNNParameters();\n    //returns parameters being clouds, temp and humidity\n    if (this.mounted) this.setState({ parameters });\n  }\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n  render() {\n    //NOTE: turn this into a map\n    const { parameters, result, nnData } = this.state;\n\n    async function handleSubmit(e) {\n      e.preventDefault();\n\n      const { parameters } = this.state;\n      const { prediction, nnData } = await calls.predictNeural(\n        parameters[\"Clouds(#)\"],\n        parameters[\"Temp(F)\"],\n        parameters[\"Humidity\"]\n      );\n      if (this.mounted) this.setState({ result: prediction, nnData: nnData });\n    }\n    handleSubmit = handleSubmit.bind(this);\n\n    function handleChange({ currentTarget: input }) {\n      const name = input.name;\n      const value = input.value;\n      const parameters = { ...this.state.parameters };\n      parameters[name] = value;\n      if (this.mounted) this.setState({ parameters });\n    }\n    handleChange = handleChange.bind(this);\n\n    if (result)\n      return (\n        <Redirect\n          to={{\n            pathname: \"/prediction\",\n            state: { result: result, parameters: parameters, nnData: nnData }\n          }}\n        />\n      );\n    else {\n      return (\n        <div style={{ fontSize: \"4vh\" }}>\n          <form style={{ marginLeft: \"1vw\" }} onSubmit={handleSubmit}>\n            Did you know? These 3 fields are some of the best at predicting\n            various weather types.\n            <br />\n            Please submit their values to get a predicted weather condition.\n            {Object.keys(parameters).map(function(name) {\n              return (\n                <div key={name} style={{ marginTop: \"1vw\" }}>\n                  <br />\n                  <label>\n                    {name}:\n                    <input\n                      type=\"text\"\n                      name={name}\n                      value={parameters[name]}\n                      style={{ marginLeft: \"1vw\" }}\n                      onChange={handleChange}\n                    />\n                  </label>\n                </div>\n              );\n            }, this)}\n            <button\n              style={{ marginTop: \"1vw\" }}\n              className=\"btn btn-light btn-lg\"\n              disabled={this.validate()}\n            >\n              Submit\n            </button>\n          </form>\n        </div>\n      );\n    }\n  }\n}\nexport default Predict;\n","export const weatherKey = [\n  \"Thunderstorm\",\n  \"Drizzle\",\n  \"Rain\",\n  \"Snow\",\n  \"Mist\",\n  \"Smoke\",\n  \"Dust\",\n  \"Fog\",\n  \"Haze\",\n  \"Sand\",\n  \"Ash\",\n  \"Squall\",\n  \"Tornado\",\n  \"Clear\",\n  \"Clouds\"\n];\n","import React, { Component } from \"react\";\nimport { weatherKey } from \"../services/weatherKey\";\nimport * as calls from \"../services/backendCalls.js\";\nimport \"../css/prediction.css\";\nclass Prediction extends Component {\n  state = {\n    parameters: [],\n    result: \"\",\n    actual: \"Thunderstorm\",\n    nnData: null,\n    running: \"No\"\n  };\n  componentDidMount() {\n    if (this.props.location.state) {\n      const _state = this.props.location.state;\n      this.setState({\n        parameters: _state.parameters,\n        result: _state.result,\n        nnData: _state.nnData\n      });\n    } else {\n      window.location = \"/\";\n    }\n  }\n  async handleSubmit(e) {\n    e.preventDefault();\n    const { nnData, actual } = this.state;\n    this.setState({ running: \"Yes\" });\n    await calls.trainNeural(nnData, actual);\n    this.setState({ running: \"Done\" });\n  }\n  handleChange({ currentTarget: select }) {\n    this.setState({ actual: select.value });\n  }\n  render() {\n    const { parameters, result, actual, running } = this.state;\n    if (running === \"Done\") {\n      return (\n        <div className=\"predictionContainer\">\n          Success! Thank you for giving data!\n        </div>\n      );\n    }\n    if (running === \"Yes\") {\n      return (\n        <div className=\"predictionContainer\">\n          Currently training. This will take a few minutes.\n        </div>\n      );\n    }\n    return (\n      <div className=\"predictionContainer\">\n        Your predicted weather condition given:\n        <br />\n        Clouds(#) = {parameters[\"Clouds(#)\"]}\n        <br />\n        Temp(F) = {parameters[\"Temp(F)\"]}℉\n        <br />\n        Humidity = {parameters[\"Humidity\"]}\n        <br />\n        <br />\n        Is <u> {result}.</u>\n        <br />\n        <br />\n        If you feel this is inaccurate or simply want to train the neural\n        network that made this decision, please input the actual value here and\n        submit:\n        <br />\n        <br />\n        <form onSubmit={this.handleSubmit.bind(this)}>\n          <select value={actual} onChange={this.handleChange.bind(this)}>\n            {weatherKey.map(function(option) {\n              return (\n                <option val={option} key={option}>\n                  {option}\n                </option>\n              );\n            })}\n          </select>\n          <br />\n          <button style={{ marginTop: \"1vw\" }} className=\"btn btn-light btn-lg\">\n            Submit\n          </button>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default Prediction;\n","import React from \"react\";\nimport { Route, Switch, Redirect } from \"react-router-dom\";\nimport { Helmet } from \"react-helmet\";\n\nimport Navbar from \"./components/navbar\";\nimport Home from \"./components/home\";\nimport Predict from \"./components/predict\";\nimport Prediction from \"./components/prediction\";\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <Helmet>\n        <style>{\"body { background-color: #6698FF; }\"}</style>\n      </Helmet>\n      <Navbar />\n      <main>\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/predict\" component={Predict} />\n          <Route path=\"/prediction\" component={Prediction} />\n        </Switch>\n      </main>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"bootstrap/dist/css/bootstrap.css\";\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}